#include <iostream.h>
#include <stdlib.h>    // exit()
#include <dirent.h>    // opendir()
#include <sys/stat.h>  // mkdir()
#include <unistd.h>    // link(), unlink()
#include <string.h>    
#include <fcntl.h>     //open()
#include <fstream.h>   //ifstream, ofstream

#define FILE_MAXLEN  60
#define CMD_MAXLEN  100

#define FILE_EXIST      1
#define FILE_NOT_EXIST -1

#define FILE_FLAG_INITIAL 0xffffffff
#define FILE_FLAG_USED    0

class fileSearchC
{
	public:	
		 fileSearchC();
		~fileSearchC();
		int getFile(char *FileName);
	private : 
		char *FileName;	
};	

fileSearchC::fileSearchC()
{	
}

fileSearchC::~fileSearchC()
{
	delete [] FileName;
}		

int fileSearchC::getFile(char *FileName)
{
	// access return success 0 / fail -1
	if (access(FileName,F_OK) == 0)
	{
		//performancecout << "[NOTICE] File [" << FileName << "] found!" << endl;
		return FILE_EXIST;
	}
	else
	{
		//performancecout << "[WARNNING] File not found!" << endl;		
		return FILE_NOT_EXIST; 
	}	
}


//전역변수로 선언
char	strCfgFileName[128];

///////////////////////////////////////////////////////////
// BDS_FileBlock.cfg
///////////////////////////////////////////////////////////
class	BdsFileBlock
{
	private:
		unsigned int	unFileNo;		//in
		unsigned int	unStartBlockNo;	//in
		unsigned int	unEndBlockNo;	//in
		unsigned int	unFlag;			//in
		unsigned int	unTimeInVal;	//in
		unsigned int	unMaxBillSize;	//in
	public:
//		char 			strCfgFileName[128];
			
		BdsFileBlock()	{}
		BdsFileBlock(const char* strFileName);
		~BdsFileBlock();
		
		unsigned int	getFileNo()				{	return unFileNo;		}
		unsigned int	getStartBlockNo()		{	return unStartBlockNo;	}
		unsigned int	getEndBlockNo()			{	return unEndBlockNo;	}
		unsigned int	getFlag()				{	return unFlag;			}
		unsigned int	getTimeInVal()			{	return unTimeInVal;		}
		unsigned int	getMaxBillSize()		{	return unMaxBillSize;	}
		
		void			setFileNo      (unsigned int unValue) {	unFileNo		= unValue;}
		void			setStartBlockNo(unsigned int unValue) {	unStartBlockNo	= unValue;}
		void			setEndBlockNo  (unsigned int unValue) {	unEndBlockNo	= unValue;}
		void			setFlag        (unsigned int unValue) {	unFlag			= unValue;}
		void			setTimeInVal   (unsigned int unValue) {	unTimeInVal		= unValue;}
		void			setMaxBillSize (unsigned int unValue) {	unMaxBillSize	= unValue;}
		
		void			read_BdsFileBlock();
		void			read_BdsFileBlock(const char* strFileName);
		void			write_BdsFileBlock();
		
		void			initial_BdsFileBlock();
		void			display_BdsFileBlock();
};


BdsFileBlock::BdsFileBlock(const char* strFileName)
{
	memset(strCfgFileName, 0x00, sizeof(strCfgFileName));
	strcpy(strCfgFileName, strFileName);
	
	setFileNo(4294967295);
	setStartBlockNo(4294967295);
	setEndBlockNo(4294967295);
	setFlag(FILE_FLAG_INITIAL);
	setTimeInVal(30);			//DEFAULT 15분 900 => 30초
	setMaxBillSize(1048576);	//1M
}

BdsFileBlock::~BdsFileBlock()
{
}

void BdsFileBlock::read_BdsFileBlock()
{
	ifstream	fin(strCfgFileName, ios::binary);
	
	if (fin)
	{
		fin.read((char*)this, sizeof(BdsFileBlock));
	}
	else	// 파일 오픈 실패시 파일을 초기화 함.
	{
		cout << "파일 초기화를 합니당~~" << endl;
		setFileNo      (4294967295);
		setStartBlockNo(4294967295);
		setEndBlockNo  (4294967295);
		setFlag        (FILE_FLAG_INITIAL);
		setTimeInVal   (30);	    		//DEFAULT 15분 900 => 30초
		setMaxBillSize (1048576);			//1M
		write_BdsFileBlock();
	}
	fin.close();	
}


void BdsFileBlock::read_BdsFileBlock(const char* strFileName)
{
	cout << "strFileName =>" << strFileName << endl;
	ifstream	fin(strFileName, ios::binary);
	
	if (fin)
	{
		cout << "read_BdsFileBlock(const char* strFileName) file exist" << endl;
		fin.read((char*)this, sizeof(BdsFileBlock));
	}
	else
	{
		cout << "[WARNING] read_BdsFileBlock(const char* strFileName) file not exist" << endl;
		setFileNo(4294967295);
		setStartBlockNo(4294967295);
		setEndBlockNo(4294967295);
		setFlag(FILE_FLAG_INITIAL);
		setTimeInVal(30);			//DEFAULT 15분 900 => 30초
		setMaxBillSize(1048576);	//1M
		write_BdsFileBlock();
	}
	fin.close();	
}

void BdsFileBlock::write_BdsFileBlock()
{
	ofstream	fout(strCfgFileName, ios::binary);

	cout << "**********************" << endl;
	cout << "strCfgFileName = " << strCfgFileName << endl;
	cout << "**********************" << endl;

	fout.write(reinterpret_cast<const char *>(this), sizeof(BdsFileBlock));
	fout.close();

//	if (fout)
//	{
//		//cout << "write_BdsFileBlock() OK" << endl;
//		//display_BdsFileBlock();
//	}
//	else
//	{
//		//cout << "	write_BdsFileBlock() FAIL FAIL" << endl;
//	}
}

void BdsFileBlock::initial_BdsFileBlock()
{
	setFileNo(4294967295);
	setStartBlockNo(4294967295);
	setEndBlockNo(4294967295);
	setFlag(FILE_FLAG_INITIAL);
	setTimeInVal(30);			//DEFAULT 15분 900 => 30초
	setMaxBillSize(1048576);	//1M
	write_BdsFileBlock();
}

void BdsFileBlock::display_BdsFileBlock()
{
	read_BdsFileBlock();
	cout << endl;
	cout << "@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@" << endl;
	cout << "strCfgFileName : " << strCfgFileName << endl;
	cout << "unFileNo       : " << unFileNo << endl;
	cout << "unStartBlockNo : " << unStartBlockNo << endl;
	cout << "unEndBlockNo   : " << unEndBlockNo << endl;
	cout << "unFlag         : " << unFlag << endl;
	cout << "unTimeInVal    : " << unTimeInVal << endl;
	cout << "unMaxBillSize  : " << unMaxBillSize << endl;
	cout << "@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@" << endl;
}





///////////////////////////////////////////////////////////
// RADIUS_FileBlock.cfg
///////////////////////////////////////////////////////////
class	RadiusFileBlock
{
	private:
		unsigned int	unStartBlockNo;	//in
		unsigned int	unTimeInVal;	//in
//		char 			strCfgFileName[128];

	public:
		RadiusFileBlock()	{}
		RadiusFileBlock(const char* strFileName);
		~RadiusFileBlock();
		
		unsigned int	getStartBlockNo()		{	return unStartBlockNo;	}
		unsigned int	getTimeInVal()			{	return unTimeInVal;		}
		
		void			setStartBlockNo(unsigned int unValue){	unStartBlockNo	= unValue;}
		void			setTimeInVal(unsigned int unValue)	{	unTimeInVal		= unValue;}
				
		void			read_RadiusFileBlock();
		void			write_RadiusFileBlock();
		
		void			initial_RadiusFileBlock();
		void			display_RadiusFileBlock();
};


RadiusFileBlock::RadiusFileBlock(const char* strFileName)
{
	strcpy(strCfgFileName, strFileName);
	setStartBlockNo(4294967295);
	setTimeInVal(30);			//DEFAULT 15분 900 => 30초
}

RadiusFileBlock::~RadiusFileBlock()
{
//	write_RadiusFileBlock();
}

void RadiusFileBlock::read_RadiusFileBlock()
{
	ifstream	fin(strCfgFileName, ios::binary);
	
	if (fin)
	{
		//cout << "read_RadiusFileBlock() file exist" << endl;
		fin.read((char*)this, sizeof(RadiusFileBlock));
		fin.close();
	}
	else
	{
		//cout << "[WARNING] read_RadiusFileBlock() file not exist" << endl;
		setStartBlockNo(4294967295);
		setTimeInVal(30);			//DEFAULT 15분 900 => 30초
		write_RadiusFileBlock();
	}
}

void RadiusFileBlock::write_RadiusFileBlock()
{
	ofstream	fout(strCfgFileName, ios::binary);
	
	fout.write(reinterpret_cast<const char *>(this), sizeof(RadiusFileBlock));
	fout.close();
}

void RadiusFileBlock::initial_RadiusFileBlock()
{
	setStartBlockNo(4294967295);
	setTimeInVal(30);			//DEFAULT 15분 900 => 30초
	write_RadiusFileBlock();
}

void RadiusFileBlock::display_RadiusFileBlock()
{
	read_RadiusFileBlock();
	cout << endl;
	cout << "@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@" << endl;
	cout << "strCfgFileName : " << strCfgFileName << endl;
	cout << "unStartBlockNo : " << unStartBlockNo << endl;
	cout << "unTimeInVal    : " << unTimeInVal << endl;
	cout << "@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@" << endl;
}





///////////////////////////////////////////////////////////
// FILTER_FileNo.cfg
///////////////////////////////////////////////////////////
class	FilterFileNo
{
	private:
		unsigned int	unStartBlockNo;	//in
//		char 			strCfgFileName[128];

	public:
		FilterFileNo()	{}
		FilterFileNo(const char* strFileName);
		~FilterFileNo();
		
		unsigned int	getStartBlockNo()		{	return unStartBlockNo;	}
		
		void			setStartBlockNo(unsigned int unValue){	unStartBlockNo	= unValue;}
				
		void			read_FilterFileNo();
		void			write_FilterFileNo();
		
		void			initial_FilterFileNo();
		void			display_FilterFileNo();
};


FilterFileNo::FilterFileNo(const char* strFileName)
{
	strcpy(strCfgFileName, strFileName);
	setStartBlockNo(4294967295);
}

FilterFileNo::~FilterFileNo()
{
//	write_FilterFileNo();
}

void FilterFileNo::read_FilterFileNo()
{
	ifstream	fin(strCfgFileName, ios::binary);
	
	if (fin)
	{
		//cout << "read_FilterFileNo() file exist" << endl;
		fin.read((char*)this, sizeof(FilterFileNo));
		fin.close();
	}
	else
	{
		//cout << "[WARNING] read_FilterFileNo() file not exist" << endl;
		setStartBlockNo(4294967295);
		write_FilterFileNo();
	}
}

void FilterFileNo::write_FilterFileNo()
{
	ofstream	fout(strCfgFileName, ios::binary);
	
	fout.write(reinterpret_cast<const char *>(this), sizeof(FilterFileNo));
	fout.close();
}

void FilterFileNo::initial_FilterFileNo()
{
	setStartBlockNo(4294967295);
	write_FilterFileNo();
}

void FilterFileNo::display_FilterFileNo()
{
	read_FilterFileNo();
	cout << endl;
	cout << "@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@" << endl;
	cout << "strCfgFileName : " << strCfgFileName << endl;
	cout << "unStartBlockNo : " << unStartBlockNo << endl;
	cout << "@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@" << endl;
}





















































//////////////////////////////////////////////////////////
//orignal
//////////////////////////////////////////////////////////
/*
#include <iostream.h>
#include<stdlib.h>       // exit()
#include<dirent.h>      // opendir()
#include<sys/stat.h>    // mkdir()
#include<unistd.h>     // link(), unlink()
#include<string.h>    
#include <fcntl.h>//open()

#define FILE_MAXLEN 60
#define CMD_MAXLEN 100

class fileSearchC
{
	public:	
		fileSearchC();
		~fileSearchC();
		int getFile(char *FileName);
	private : 
		char *FileName;	
};	

fileSearchC::fileSearchC()
{	
}

fileSearchC::~fileSearchC()
{
	delete [] FileName;
}		

int fileSearchC::getFile(char *FileName)
{

	int fd;
	
	if (  ( fd = open(FileName,O_RDONLY) ) == -1  )
	{
		//performancecout << "[WARNNING] File not found!" << endl;
		return 0;
	}
	else
	{
		close(fd);
		//performancecout << "[NOTICE] File [" << FileName << "] found!" << endl;
		return 1; 
	}	
	
	
}
*/
//////////////////////////////////////////////////////////
//orignal
//////////////////////////////////////////////////////////





