/****************************************************************************/
/* 파 일 명 : RateRule.pc													*/
/* 작 성 자 : KSI / 조상영								                    */
/* 기    능 : 평일,휴일, 시간별 10초당 이용요금 산출						*/
/* 작성일자 : 2000년 10월 30일                                              */
/* 변경일자 : 2001년 05월 21일  by 한근희                                       */
/* 관련화일 : rate_tbl.cfg, holiday.cfg 									*/  
/* 기    타 :                                                               */
/* Version : 1.1( 2001. 05. 21 )											*/
/****************************************************************************/

#include "RateRule.hpp"

#define SQLCA_STORAGE_CLASS extern
EXEC    SQL     INCLUDE SQLCA;

EXEC SQL BEGIN DECLARE SECTION;
//VARCHAR	rateusername[32];
//VARCHAR	ratepasswd[32];
int		nRateType;
int		nTodayType;
int		nStartTime;
int		nEndTime;
int		nTimeRate;
int		nPacketRate;
int		nPacketSize;
char	sHoliDay[8+1];
EXEC SQL END DECLARE SECTION;


// Cusor declare 
EXEC SQL declare rate_cur cursor for
		select  rate_type, today_type, start_time, end_time, time_rate, packet_rate, packet_size 
		from    t_rate_rule;
		
EXEC SQL declare holiday_cur cursor for
		select  holiday_type 
		from    t_holiday;
				
//	Log Manager
extern SendLogManage*				LogM;


//===============================================================
// Constructor Method											=
//  : DB에 연결하여, Rate Rule을 읽어온다.             				=
// argument : None												=
// return value : None											=
//																=
//===============================================================
RateRule::RateRule(void)
{
	int			nSqlcode;
	time_t		today;
	FILE		*fp;
	
	time(&today);
	Tm = localtime(&today);	// TM 을 오늘날짜로 초기화
	
	DBerror=LimitSec=chk_H=Rn=Hn=0;
	memset(strDay, 0x00, sizeof(strDay));
	
//	DBerror=ConnectToDB();	// 오라클연결
/*
	if(DBerror!=0) 
	{
		printf("DB Connect Error : [%d]", DBerror);
		return;	// error 발생
	}
*/	
	//--------------- Rate 테이블 읽기
	EXEC SQL OPEN rate_cur;
	for (;;) 
	{
		nSqlcode = FetchRateDB();
		if( nSqlcode != 0 || nSqlcode == 1403)	break;
		
		tblRate[Rn].Rtype = nRateType;
		tblRate[Rn].Today = nTodayType;
		tblRate[Rn].Stime = nStartTime;	
		tblRate[Rn].Ltime = nEndTime;	
		tblRate[Rn].Rate = nTimeRate;		// 고속
		tblRate[Rn].PRate = nPacketRate;	// 저속
		tblRate[Rn].PSize = nPacketSize;	
		Rn++;
	}
	EXEC SQL CLOSE rate_cur;
	//--------------- Holiday 테이블 읽기
	EXEC SQL OPEN holiday_cur;
	for (;;) 
	{
		nSqlcode = FetchHolidayDB();
		if( nSqlcode != 0 || nSqlcode == 1403)	break;
		
		memset(tblHoliday[Hn].Date, 0x00, 8+1);
		strncpy(tblHoliday[Hn].Date, sHoliDay, 8);
		Hn++;
	}
	EXEC SQL CLOSE holiday_cur;
//	Db_close();
	
	/*
	fp = fopen(FNAME_RATE_TABLE, "r+b");   
	if(!fp) 
	{
		printf("FILE OPEN ERROR %s\n", FNAME_RATE_TABLE);
		return;
	}
	
	while(1)
	{
		if(!fread((void*)&tblRate[Rn], sizeof(RateTable), 1,  fp)) break;   
		//printf("tblRate[%d]=%d\n", Rn, tblRate[Rn].Today);
		Rn++;
	}
	fclose(fp);
	
	
	
	fp = fopen(FNAME_HOLIDAY_TABLE, "r+b");              
	if(!fp) 
	{
		printf("FILE OPEN ERROR %s\n", FNAME_HOLIDAY_TABLE);
		return;
	}
	
	while(1)
	{
		if(!fread((void*)&tblHoliday[Hn], sizeof(HolidayTable), 1,  fp)) break;   
		//printf("tblHoliday[%d]=%s\n", Hn, tblHoliday[Hn].Date);
		Hn++;
	}
	fclose(fp);	
	*/
	PSize=0;
	OnPacket=1;	// 무조건 패킷과금
	
	
//	*LogM << LogM->ErrorCode(0) 
//			<< "[Rating Rule] Rn= " << Rn << endl;
//	*LogM << LogM->ErrorCode(0) 
//			<< "[Rating Rule] Hn= " << Hn << endl;
}
/*
//===============================================================
// ConnectToDB Method											=
//  : DB에 연결							           				=
// argument : None												=
// return value : Sql code										=
//																=
//===============================================================
int RateRule::ConnectToDB( void )
{
	strcpy((char *) rateusername.arr, DB_USERNAME);
	rateusername.len = (unsigned short) strlen(DB_USERNAME);

	strcpy((char *) ratepasswd.arr, DB_PASSWORD);
	ratepasswd.len = (unsigned short) strlen(DB_PASSWORD);
	
	EXEC SQL connect :rateusername identified by :ratepasswd;
	return(sqlca.sqlcode);
}

//===============================================================
// Db_close Method												=
//  : DB에 close							           				=
// argument : None												=
// return value : Sql code										=
//																=
//===============================================================
int RateRule::Db_close()
{
	EXEC	SQL	COMMIT	WORK	RELEASE;

	return(sqlca.sqlcode); 
}
*/
//===============================================================
// FetchRateDB Method					   						=
//  : Rate Db Fetch								 	       		=
// argument     :  None											=
// return value : sql code		 								=
//																=
//===============================================================

int RateRule::FetchRateDB(void)
{
	EXEC SQL	fetch	rate_cur 
				into 	:nRateType, nTodayType, :nStartTime, :nEndTime, :nTimeRate, :nPacketRate, :nPacketSize;
	printf("fetch_rate sqlcode:[%d]\n",sqlca.sqlcode);
	return(sqlca.sqlcode);
}	
//===============================================================
// FetchHolidayDB Method										=
//  : Holiday Db Fetch							 	       		=
// argument     :  None											=
// return value : sql code		 								=
//																=
//===============================================================
int RateRule::FetchHolidayDB(void)
{
	EXEC SQL	fetch	holiday_cur 
				into 	:sHoliDay;
	printf("fetch_holiday sqlcode:[%d]\n",sqlca.sqlcode);
	return(sqlca.sqlcode);
}	
//===============================================================
// CHK_Holyday Method											=
//  : 공휴일을 check								 	       		=
// argument     :  None											=
// return value : 1->공휴일		 								=
//				  0->평일										=
//===============================================================
int	RateRule::CHK_Holyday(void)	
{
	int i=Hn;
	
	while(i--) if(!strncmp(tblHoliday[i].Date, strDay, 8)) return 1;

	return 0;	
	
}
//===============================================================
// GetRate Method												=
//  : 요금테이블을 검색해 10초당요금을 구한다.		 	       		=
// argument     :  None											=
// return value : 10초당요금		 								=
//===============================================================
int	RateRule::GetRate(void)
{
	int i=Rn;
	int j=(Tm->tm_hour*100) + Tm->tm_min;
	/*
	*LogM << LogM->ErrorCode(0) 
			<< "[Rating Rule] j= " << j << endl;
	*/
	*LogM << LogM->ErrorCode(0) 
			<< "[Rating Rule] Rn= " << Rn << endl;
	/*
	*LogM << LogM->ErrorCode(0) 
			<< "[Rating Rule] chk_H= " << chk_H << endl;
	*/
	
	// 임시로 테이블수를 넣어주었습니다.
	// 테이블수를 수정해야 합니다.
	if( Rn == 0 ) Rn = 8;
	for( i= 0; i < Rn; i++ )
		if(tblRate[i].Today==chk_H){
			if( 0 )
			{
				*LogM << LogM->ErrorCode(0) 
					<< "[Rating Rule] tblRate[i].Stime= " << tblRate[i].Stime << endl;
				*LogM << LogM->ErrorCode(0) 
					<< "[Rating Rule] tblRate[i].Ltime= " << tblRate[i].Ltime << endl;
				*LogM << LogM->ErrorCode(0) 
					<< "[Rating Rule] tblRate[i].Rate= " << tblRate[i].Rate << endl;
			}
			if((tblRate[i].Stime <= j) && (tblRate[i].Ltime > j)) {
				if(OnPacket) {
					PSize = tblRate[i].PSize;
					if(fgHI==1) return tblRate[i].Rate; // 저속
					else if(fgHI==2) return tblRate[i].PRate;	// 고속
				}else return tblRate[i].Rate;
			}
		}
	
	return 0;
}
//===============================================================
// GetRate Method												=
//  : 요금테이블을 검색해 10초당요금을 구한다.		 	       		=
// argument     :  select -> 계산기준 1(시작) 2(끝) , 적용시각기준	=
//				시작요금체계를 적용할것인가? 끝의 요금체계를 적용할 	=
//				것인가?											=
// return value : 요금		 									=
//===============================================================
int	RateRule::GetRate(int select)
{
			
	if(select==1) Tm = localtime(&STime);		//주일얻기
	else Tm = localtime(&ETime);				
	
	sprintf(strDay, "%04d%02d%02d", Tm->tm_year+1900, Tm->tm_mon+1, Tm->tm_mday);
	//printf("%04d%02d%02d %2d:%2d [%d]\n", Tm->tm_year+1900, Tm->tm_mon+1, Tm->tm_mday, Tm->tm_hour, Tm->tm_min, Tm->tm_wday);
	
	if(!Tm->tm_wday || CHK_Holyday()) chk_H=3;	//공휴일
	else if(!Tm->tm_wday==6) chk_H=2;	//토요일
	else chk_H = 1;		//평일
	
	return GetRate();
}
//===============================================================
// GetTelRate Method											=
//  : 요금을 계산한다(시간단위)						 	       		=
// argument     :  select -> 계산기준 1(시작) 2(끝) , 적용시각기준	=
//				  amount -> 시간양							 	=
//				  last -> 짜투리적용여부							=
// return value : 요금		 									=
//===============================================================
int	RateRule::GetTelRate(int amount, int select,  int last)	// 전화요금을 계산한다(시간단위)
{
	*LogM << LogM->ErrorCode(0) 
			<< "[Rating Rule] amount= " << amount << endl;
	if(amount<=0) return 0;
	
	int i, n = (amount * 0.1);
	int rate;
	
	rate=GetRate(select);
	*LogM << LogM->ErrorCode(0) 
			<< "[Rating Rule] rate= " << rate << endl;
	if(last)
	{
		if(amount%10) n++;
		// i=(amount%10) * ((double)rate*0.1);
		// printf("n=%d rate=%d amount=%d  [%d]\n", n, rate, amount, i);
		n = (n*rate);
	}else n *= rate;
	
	*LogM << LogM->ErrorCode(0) 
			<< "[Rating Rule] n= " << n << endl;
	return n;
}


//===============================================================
// GetRate Method												=
//  : 요금을 계산한다								 	       		=
//    3개이상 요금율이 적용되지 않는다.     							=
// argument     :  rtype -> 1(저속) 2(고속)						=
//				  stime -> start time						 	=
//				  etime -> end time	         					=
//				  last -> 짜투리적용여부							=
//				  packet ->	패킷량.								=
// return value : 최종 요금	 									=
//===============================================================
int RateRule::GetRate(int rtype, time_t stime, time_t etime, int last, int packet)
{
	if(DBerror!=0) return -1;
	
	int				n;
	int				ret;
	unsigned long	difft;
	struct  tm 		tm1;	
	struct  tm 		tm2;	
	time_t 			tmImsi;
	char			imsi[20];
	
	OnPacket = 1;	// 패킷과금여부지정
	fgHI=rtype;		// rtype -> 1(저속) 2(고속)	
	
	STime = stime;
	ETime = etime;
	
	memcpy((void *)&tm1, localtime(&stime), sizeof(struct tm));	
	memcpy((void *)&tm2, localtime(&etime), sizeof(struct tm));			
	
	/*
	sprintf(imsi, "%04d%02d%02d %02d:%02d:%02d", tm1.tm_year+1900, tm1.tm_mon+1, tm1.tm_mday,
				tm1.tm_hour, tm1.tm_min, tm1.tm_sec);
	*LogM << LogM->ErrorCode(0) 
			<< "[Rating Rule] STime= " << imsi << endl;
							
	sprintf(imsi, "%04d%02d%02d %02d:%02d:%02d", tm2.tm_year+1900, tm2.tm_mon+1, tm2.tm_mday,
				tm2.tm_hour, tm2.tm_min, tm2.tm_sec);
	*LogM << LogM->ErrorCode(0) 
			<< "[Rating Rule] ETime= " << imsi << endl;				
	*/
	LimitSec=0;
	if(rtype==1) //시간과금이면
	{
		if(tm1.tm_hour==tm2.tm_hour)
		{	//시간이 같으면 동일한 요금적용
			if(last) return GetTelRate(difftime(etime, stime),1, last);
			else
			{
				difft=difftime(etime, stime);
				LimitSec = difft%10;
				if(difft<10) return 0;
				else return GetTelRate(difftime(etime, stime),1, last);
			}
			
		}else
		{	//시간이 다르면 
			n=GetRate(1);
			if(n==GetRate(2)) // 시간은 다르나 동일한 Rate가 적용되면 나누지않고 계산 2000.11.23
			{
				if(last) return GetTelRate(difftime(etime, stime),1, last);
				else
				{
					difft=difftime(etime, stime);
					LimitSec = difft%10;
					if(difft<10) return 0;
					else return GetTelRate(difftime(etime, stime),1, last);
				}  
			}
			
			
			tmImsi = stime + ( 59 - tm1.tm_min )*60 + (60-tm1.tm_sec);
		//	tmImsi = stime + (60 - tm1.tm_sec);	// 바로다음시간 00분00초로 만든다.
			
			ret = GetTelRate(difftime(tmImsi, stime),1, last);
			if(last) 
			{
				ret += GetTelRate(difftime(etime, tmImsi),2, last);
			}else
			{
				difft=difftime(etime, tmImsi);
				LimitSec = difft%10;
				if(difft>=10) ret += GetTelRate(difftime(etime, tmImsi),2, last);
			}
			return ret;
		}
	}else
	{	// 패킷과금이면..
		
		ret = GetRate(1);
		if(!PSize) PSize=512;
/*		
		//printf("rate: %d / pszie: %d / [%d]\n", ret, PSize, (packet / PSize));
		*LogM << LogM->ErrorCode(0) 
			<< "[Rating Rule] ret= " << ret << endl;
		*LogM << LogM->ErrorCode(0) 
			<< "[Rating Rule] PSize= " << PSize << endl;
		*LogM << LogM->ErrorCode(0) 
			<< "[Rating Rule] packet= " << packet << endl;
*/			
		if(last) 
		{
			n = (int)(packet/PSize);
			if(packet % PSize) n++;
			ret *= n;
		}else 
		{
			ret *= 	(int)(packet / PSize);
			LimitSec = packet % PSize;
		}
		
		return (ret);
	}
}

