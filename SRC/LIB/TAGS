Address	UdrBds.cpp	/^\/\/	IP Address (int) 값을 문자열로 변환$/
CFileConfigData	BlockFile.cpp	/^CFileConfigData::CFileConfigData(const char* strFi/
CFileData	BlockFile.cpp	/^CFileData::CFileData(const char* strCfgFileName)$/
CSemHandler	CSemHandler.cpp	/^CSemHandler::CSemHandler(const char* strPathName, /
CTrapDbLib	CTrapDbLib.cpp	/^CTrapDbLib::CTrapDbLib()$/
CloseCursor	CTrapDbLib.cpp	/^bool CTrapDbLib::CloseCursor()$/
CloseIPCSEM	CSemHandler.cpp	/^int CSemHandler::CloseIPCSEM(void)$/
CommCfgFile	CommCfgFile.cpp	/^CommCfgFile::CommCfgFile( const char* strFileName /
CreateIPCSEM	CSemHandler.cpp	/^int CSemHandler::CreateIPCSEM(int nsems)	\/\/	nsems /
DateTime	time.cpp	/^DateTime::DateTime()$/
DbConnect	SqlCommon.cpp	/^DbConnect::DbConnect()$/
DisplayError	CSemHandler.cpp	/^void CSemHandler::DisplayError(const char*	str)$/
ErrorCode	SendLogManage.cpp	/^err_t	SendLogManage::ErrorCode(int	nValue)$/
FileLogWrite	FileLogWrite.cpp	/^FileLogWrite::FileLogWrite(const char *path, const/
GetHexDump	FileLogWrite.cpp	/^void FileLogWrite::GetHexDump(char *RBuf, const ch/
Get_SWGLAG	LogManageSM.cpp	/^int LogManageSM::Get_SWGLAG(int sysid, int service/
HandleOfAllocIndex	HandleOfAllocIndex.cpp	/^HandleOfAllocIndex::HandleOfAllocIndex( const char/
HandleOfAllocIndex_New	HandleOfAllocIndex_new.cpp	/^HandleOfAllocIndex_New::HandleOfAllocIndex_New(	in/
HeaderOfMessage	MsgFormat.cpp	/^HeaderOfMessage::HeaderOfMessage	(	int		MsgType,		/
InitBuf	FileLogWrite.cpp	/^void FileLogWrite::InitBuf(char *Buf,long Cnt)$/
Init_SqlCa	SqlErr.cpp	/^void SqlErr::Init_SqlCa()$/
Insert	CTrapDbLib.cpp	/^bool CTrapDbLib::Insert(const int nTrapNo, const c/
LogDelete	LogManageSM.cpp	/^int LogManageSM::LogDelete(int sysid, int servicei/
LogFactory	logmessage.cpp	/^LogFactory::LogFactory(unsigned int jid, unsigned /
LogInsert	LogManageSM.cpp	/^int LogManageSM::LogInsert(int sysid, int servicei/
LogManagement	ConfigLog.cpp	/^LogManagement::LogManagement(const char* strPath, /
LogMessage	logmessage.cpp	/^LogMessage::LogMessage(unsigned int jid, unsigned /
LogSMinit	LogManageSM.cpp	/^void LogManageSM::LogSMinit(void)$/
LogTrapHandle	LogTrapHandle.cpp	/^LogTrapHandle::LogTrapHandle(char* DBName, char* D/
MRecvLogManage.cpp	RecvLogManage.cpp	/^int main(int argc, char *argv[])$/
MessageQueue	TempMsgQ.cpp	/^MessageQueue<T>::MessageQueue		(  	int nCount,				/
MessageQueueInfo	MqInfo.cpp	/^MessageQueueInfo::MessageQueueInfo()$/
MsgQfileInfo	MqInfo_file.cpp	/^MsgQfileInfo::MsgQfileInfo()$/
OpenCursor	CTrapDbLib.cpp	/^bool CTrapDbLib::OpenCursor()$/
ProcessID	SqlCommon.cpp	/^ProcessID::ProcessID(	int		nLSystemId,$/
RecvLogManage	RecvLogManage.cpp	/^RecvLogManage::RecvLogManage(void)$/
SearchIndex	t_trap_info.cpp	/^int t_trap_info::SearchIndex(int nCode)$/
Select	CTrapDbLib.cpp	/^int CTrapDbLib::Select(trapT *data)$/
SendLogManage	SendLogManage.cpp	/^SendLogManage::SendLogManage(	int		nSystemId,$/
Set_GroupSwitch	LogManageSM.cpp	/^int LogManageSM::Set_GroupSwitch(int sysid, int se/
Set_Init	LogManageSM.cpp	/^void LogManageSM::Set_Init(void)$/
Set_ProcesSwitch	LogManageSM.cpp	/^int LogManageSM::Set_ProcesSwitch(int sysid, int s/
Set_ServSwitch	LogManageSM.cpp	/^int LogManageSM::Set_ServSwitch(int sysid, int ser/
Set_Switch	LogManageSM.cpp	/^int LogManageSM::Set_Switch(int sysid, int service/
Set_SysSwitch	LogManageSM.cpp	/^int	LogManageSM::Set_SysSwitch(int sysid, int flag/
SharedMemory	SharedMem.cpp	/^SharedMemory::SharedMemory	(	int		nLSystemId,				\\/
ShmBuf	SharedMemLegacy.cpp	/^ShmBuf::ShmBuf(const char* strPathName, int nId, i/
SqlErr	SqlErr.cpp	/^SqlErr::SqlErr()$/
SqlErrCout	SqlErr.cpp	/^char *SqlErr::SqlErrCout(char* strMsg)$/
SqlError	SqlErr.cpp	/^void  SqlErr::SqlError(char* strMsg)$/
Timestamp	UdrBds.cpp	/^\/\/	Timestamp (long(time_t)) 값을 문자열로 변환$/
UpdateSendTime	CTrapDbLib.cpp	/^bool CTrapDbLib::UpdateSendTime(const char *ptrKey/
Wook	SqlErr.cpp	/^\/\/   AUTHOR         : Kwon Chong Wook (cwkwon@neom/
Write	FileLogWrite.cpp	/^void FileLogWrite::Write(const char *format, ...)$/
WriteErrorLog	RecvLogManage.cpp	/^void RecvLogManage::WriteErrorLog(void)$/
WriteEventHst	RecvLogManage.cpp	/^void RecvLogManage::WriteEventHst(void)$/
WriteHexLog	FileLogWrite.cpp	/^int FileLogWrite::WriteHexLog(char *Buf,	long BufL/
WriteLog	RecvLogManage.cpp	/^int RecvLogManage::WriteLog(void)$/
WritePerForm	RecvLogManage.cpp	/^void RecvLogManage::WritePerForm(void)$/
calu_addMonth	time.cpp	/^void	DateTime::calu_addMonth(int mon)$/
checkFlagOfSavedPosition	HandleOfAllocIndex.cpp	/^int HandleOfAllocIndex::checkFlagOfSavedPosition()/
checkOffsetOfEmptyRoom	HandleOfAllocIndex.cpp	/^int HandleOfAllocIndex::checkOffsetOfEmptyRoom()$/
clearAll	logmessage.cpp	/^void MessageHeader::clearAll(void) {$/
close_Cursor	t_trap_info.cpp	/^void t_trap_info::close_Cursor()$/
close_MqFile	MqInfo_file.cpp	/^int	MsgQfileInfo::close_MqFile(int fp)$/
connect	SqlCommon.cpp	/^int DbConnect::connect()$/
conv_A_TYPE	UdrBds.cpp	/^void CBDS_UdrFormat::conv_A_TYPE	(A_INT_TYPE* stPt/
conv_BDS_UDR	UdrBds.cpp	/^void CBDS_UdrFormat::conv_BDS_UDR	(UdrFormat& UdrF/
conv_B_TYPE	UdrBds.cpp	/^void CBDS_UdrFormat::conv_B_TYPE	(B_TYPE* stPtrIte/
conv_C_TYPE	UdrBds.cpp	/^void CBDS_UdrFormat::conv_C_TYPE	(C_TYPE* stPtrIte/
conv_D_TYPE	UdrBds.cpp	/^void CBDS_UdrFormat::conv_D_TYPE	(D_TYPE* stPtrIte/
conv_E_TYPE	UdrBds.cpp	/^void CBDS_UdrFormat::conv_E_TYPE	(E_TYPE* stPtrIte/
conv_F_TYPE	UdrBds.cpp	/^void CBDS_UdrFormat::conv_F_TYPE	(F_TYPE* stPtrIte/
conv_G_TYPE	UdrBds.cpp	/^void CBDS_UdrFormat::conv_G_TYPE	(G_TYPE* stPtrIte/
conv_H_TYPE	UdrBds.cpp	/^void CBDS_UdrFormat::conv_H_TYPE	(H_TYPE* stPtrIte/
conv_I_TYPE	UdrBds.cpp	/^void CBDS_UdrFormat::conv_I_TYPE	(I_TYPE* stPtrIte/
conv_Int2strValue	UdrBds.cpp	/^int	CBDS_UdrFormat::conv_Int2strValue(int nValue, /
conv_IntMin2StrMin	UdrBds.cpp	/^void CBDS_UdrFormat::conv_IntMin2StrMin	(unsigned /
conv_UdrData	UdrBds.cpp	/^void CBDS_UdrFormat::conv_UdrData(int strUdrData, /
conv_Y_TYPE	UdrBds.cpp	/^void CBDS_UdrFormat::conv_Y_TYPE	(Y_TYPE* stPtrIte/
conv_Z_TYPE	UdrBds.cpp	/^void CBDS_UdrFormat::conv_Z_TYPE	(Z_TYPE* stPtrIte/
cpp	BlockFile.cpp	/^\/\/	BDS Send Data File Name	: use in BlockFile.cpp	/
create_MqFile	MqInfo_file.cpp	/^int MsgQfileInfo::create_MqFile	(	int			nSystemId,/
declare_Cursor	t_trap_info.cpp	/^void t_trap_info::declare_Cursor()    throw(char */
deleteIndex	HandleOfAllocIndex.cpp	/^void HandleOfAllocIndex::deleteIndex(unsigned int /
disconnect	SqlCommon.cpp	/^int DbConnect::disconnect()$/
displayHeader	MsgFormat.cpp	/^void HeaderOfMessage::displayHeader(void)$/
displayLongLongValue	HandleOfAllocIndex.cpp	/^void HandleOfAllocIndex::displayLongLongValue(cons/
displayValue	MsgFormat.cpp	/^void MsgLog::displayValue(void)$/
display_UdrItem	UdrBds.cpp	/^void	CBDS_UdrFormat::display_UdrItem(char*	strBloc/
error	HandleOfAllocIndex.cpp	/^\/\/				  -1 -> error ( overflow )						$/
fetch_Data	t_trap_info.cpp	/^void t_trap_info::fetch_Data()    throw(char *)$/
fetch_all	t_trap_info.cpp	/^void t_trap_info::fetch_all()		 throw(char *)	\/\/	p/
for	CTrapDbLib.cpp	/^   for (int i=0; i<sqlca.sqlerrd[2]; i++)$/
getBitValue	TempMsgQ.cpp	/^int MessageQueue<T>::getBitValue( int nValue, int /
getContents	logmessage.cpp	/^string& LogMessage::getContents(void) {$/
getDate	logmessage.cpp	/^const char*  MessageHeader::getDate(void) {$/
getFname	logmessage.cpp	/^const char*  MessageHeader::getFname(void) {$/
getFtokKeyId	TempMsgQ.cpp	/^int MessageQueue<T>::getFtokKeyId( int nJobId1, in/
getJobId	logmessage.cpp	/^unsigned int MessageHeader::getJobId(void) {$/
getLogFlag	ConfigLog.cpp	/^int LogManagement::getLogFlag()$/
getMessage	logmessage.cpp	/^const char*  MessageHeader::getMessage(void) {$/
getOffsetNlength	UdrBds.cpp	/^int	CBDS_UdrFormat::getOffsetNlength(const char* s/
getOffsetOfEmptyRoom	HandleOfAllocIndex.cpp	/^int HandleOfAllocIndex::getOffsetOfEmptyRoom()$/
getProcId	logmessage.cpp	/^unsigned int MessageHeader::getProcId(void) {$/
getTime	logmessage.cpp	/^const char*  MessageHeader::getTime(void) {$/
getType	logmessage.cpp	/^unsigned int MessageHeader::getType(void) {$/
get_AmountOfData	MqInfo.cpp	/^unsigned int MessageQueueInfo::get_AmountOfData()$/
get_DateTime	time.cpp	/^char*	DateTime::get_DateTime(int nType)$/
get_DateTime2	time.cpp	/^char*	DateTime::get_DateTime2(int nTime, int nType/
get_DateTimeT	time.cpp	/^char*	DateTime::get_DateTimeT(time_t tTime, int nT/
get_Day	time.cpp	/^int	DateTime::get_Day(void)$/
get_LastWrittenUdrFileSeq	BlockFile.cpp	/^unsigned int CFileData::get_LastWrittenUdrFileSeq(/
get_MDateTime	time.cpp	/^char*	DateTime::get_MDateTime(int nType)$/
get_Message	MqInfo_file.cpp	/^int MsgQfileInfo::get_Message(void* strMsg, int fp/
get_Month	time.cpp	/^int	DateTime::get_Month(void)$/
get_Mtime	time.cpp	/^char*	DateTime::get_Mtime(int nType)$/
get_OffsetOfHead	MqInfo_file.cpp	/^int MsgQfileInfo::get_OffsetOfHead()$/
get_OffsetOfTail	MqInfo_file.cpp	/^int MsgQfileInfo::get_OffsetOfTail()$/
get_ProcessId	MsgFormat.cpp	/^char* HeaderOfMessage::get_ProcessId()$/
get_RecordCount	t_trap_info.cpp	/^void t_trap_info::get_RecordCount()    throw(char /
get_StringLength	SendLogManage.cpp	/^int SendLogManage::get_StringLength(void)$/
get_Year	time.cpp	/^int	DateTime::get_Year(void)$/
get_date	time.cpp	/^char*	DateTime::get_date(int nType)$/
get_strBillingData	BlockFile.cpp	/^void CFileData::get_strBillingData(int nIndex, CUd/
get_strMsgQueueName	MqInfo_file.cpp	/^char* MsgQfileInfo::get_strMsgQueueName()$/
get_string	SendLogManage.cpp	/^const char* SendLogManage::get_string(void)$/
get_time	time.cpp	/^char*	DateTime::get_time(int nType)$/
get_time_t	time.cpp	/^time_t	DateTime::get_time_t(char*	strDateTime)$/
get_unHeadOffset	MqInfo.cpp	/^int	MessageQueueInfo::get_unHeadOffset()$/
get_unRecCount	MqInfo_file.cpp	/^unsigned int MsgQfileInfo::get_unRecCount()$/
get_unRecSize	MqInfo_file.cpp	/^unsigned int MsgQfileInfo::get_unRecSize()$/
get_unTailOffset	MqInfo.cpp	/^int	MessageQueueInfo::get_unTailOffset()$/
if	CTrapDbLib.cpp	/^   if (sqlca.sqlcode == 0) { \/* EXEC SQL COMMIT WO/
init_TrapTbl	t_trap_info.cpp	/^void t_trap_info::init_TrapTbl()$/
insertTrap	LogTrapHandle.cpp	/^void LogTrapHandle::insertTrap(int TrapNo, char* T/
lf	logmessage.cpp	/^LogFactory& LogFactory::operator<<(LogFactory& lf(/
lock	CSemHandler.cpp	/^int CSemHandler::lock()$/
makeLogFileName	TempMsgQ.cpp	/^void MessageQueue<T>::makeLogFileName()$/
make_BdsUdrFileName	BlockFile.cpp	/^void CFileData::make_BdsUdrFileName(unsigned int u/
memcpy	CTrapDbLib.cpp	/^   memcpy(data, h_data, sizeof(trapT)*D_LOG_RECORD/
moveStrDate2StructTime	time.cpp	/^void	DateTime::moveStrDate2StructTime(struct tm* s/
newIndex	HandleOfAllocIndex.cpp	/^unsigned int HandleOfAllocIndex::newIndex(unsigned/
open_Cursor	t_trap_info.cpp	/^void t_trap_info::open_Cursor()    throw(char *)$/
open_MqFile	MqInfo_file.cpp	/^int	MsgQfileInfo::open_MqFile(char*	strMqFileName)/
os	logmessage.cpp	/^LogFactory& LogFactory::operator<<(ostream& os(ost/
print_all	CommCfgFile.cpp	/^void CommCfgFile::print_all( void )$/
putContents	logmessage.cpp	/^void LogMessage::putContents(string& str) {$/
putFname	logmessage.cpp	/^void LogMessage::putFname(string& str) {$/
putJobId	logmessage.cpp	/^void LogMessage::putJobId(unsigned int j) {$/
putProcId	logmessage.cpp	/^void LogMessage::putProcId(unsigned int p) {$/
putStrDateTime	time.cpp	/^void	DateTime::putStrDateTime(char*	strDateTime)$/
putType	logmessage.cpp	/^void LogMessage::putType(unsigned int t) {$/
put_EventHistData	SendLogManage.cpp	/^void SendLogManage::put_EventHistData(	int		nFlag,/
put_Message	MqInfo_file.cpp	/^int MsgQfileInfo::put_Message(const void* strMsg, /
put_PerformData	MsgFormat.cpp	/^void ProcPerformData::put_PerformData(	int 		 nDat/
put_PerformanceData	SendLogManage.cpp	/^void SendLogManage::put_PerformanceData	(	int				n/
put_ProcErrInfo	MsgFormat.cpp	/^void ProcErrInfo::put_ProcErrInfo(int nError, char/
put_ProcEventData	MsgFormat.cpp	/^void ProcEventData::put_ProcEventData(int nExitVal/
put_nErrorCode	MsgFormat.cpp	/^int	 MsgLog::put_nErrorCode	(int nValue)$/
put_strBdsFile	BlockFile.cpp	/^int CFileData::put_strBdsFile()$/
put_strBdsFileBuffer	BlockFile.cpp	/^int CFileData::put_strBdsFileBuffer(int nBlockSeqN/
put_strDate	MsgFormat.cpp	/^void HeaderOfMessage::put_strDate()$/
put_strDateTime	MsgFormat.cpp	/^void ProcPerformData::put_strDateTime(int nFlag, i/
put_strEventDateTime	MsgFormat.cpp	/^void ProcEventData::put_strEventDateTime(void)$/
put_strFileName	MsgFormat.cpp	/^void ProcErrInfo::put_strFileName()$/
put_strMsg	MsgFormat.cpp	/^void MsgLog::put_strMsg		(const char* strValue, in/
put_strTime	MsgFormat.cpp	/^void HeaderOfMessage::put_strTime()$/
put_unFileSeq	BlockFile.cpp	/^void CFileConfigData::put_unFileSeq(unsigned int u/
read_BdsUdrData	BlockFile.cpp	/^int CFileData::read_BdsUdrData(unsigned int unSeq)/
read_CommCfgFile	CommCfgFile.cpp	/^void CommCfgFile::read_CommCfgFile( void )$/
read_FileConfigFile	BlockFile.cpp	/^void CFileConfigData::read_FileConfigFile()$/
read_Mqinfo	MqInfo_file.cpp	/^void MsgQfileInfo::read_Mqinfo(fstream* fQFile)$/
recvMsg	TempMsgQ.cpp	/^int MessageQueue<T>::recvMsg(T* OneRecord)$/
return	CTrapDbLib.cpp	/^return (sqlca.sqlcode == 0) ? true : false;$/
save_ulSavedPosition	HandleOfAllocIndex_64.cpp	/^void HandleOfAllocIndex::save_ulSavedPosition(unsi/
save_unSavedPosition	HandleOfAllocIndex.cpp	/^void HandleOfAllocIndex::save_unSavedPosition(int /
sendMsg	TempMsgQ.cpp	/^int MessageQueue<T>::sendMsg(const T* OneRecord)$/
setAllocIndexFlag	HandleOfAllocIndex.cpp	/^void HandleOfAllocIndex::setAllocIndexFlag(unsigne/
setDate	logmessage.cpp	/^void MessageHeader::setDate(const char* date) {$/
setFname	logmessage.cpp	/^void MessageHeader::setFname(const char* str) {$/
setJobId	logmessage.cpp	/^void MessageHeader::setJobId(unsigned int jid) {$/
setLogFlag	ConfigLog.cpp	/^void LogManagement::setLogFlag(int nJobId, int nPr/
setMessage	logmessage.cpp	/^void MessageHeader::setMessage(const char* str) {/
setProcId	logmessage.cpp	/^void MessageHeader::setProcId(unsigned int pid) {/
setProcInfo	ConfigLog.cpp	/^void LogManagement::setProcInfo(int nJobId, int nP/
setTime	logmessage.cpp	/^void MessageHeader::setTime(const char* time) {$/
setType	logmessage.cpp	/^void MessageHeader::setType(unsigned int type) {$/
set_MsgQueueName	MqInfo.cpp	/^void MessageQueueInfo::set_MsgQueueName (	unsigned/
set_nStatus	MsgFormat.cpp	/^void MsgPmsStatus::set_nStatus(int	nValue)$/
set_unHeadOffset	MqInfo.cpp	/^void MessageQueueInfo::set_unHeadOffset (unsigned /
set_unRecCount	MqInfo.cpp	/^void MessageQueueInfo::set_unRecCount (unsigned in/
set_unRecSize	MqInfo.cpp	/^void MessageQueueInfo::set_unRecSize (unsigned int/
set_unRecvDataSeq	MqInfo.cpp	/^void MessageQueueInfo::set_unRecvDataSeq (unsigned/
set_unSendDataSeq	MqInfo.cpp	/^void MessageQueueInfo::set_unSendDataSeq (unsigned/
set_unTailOffset	MqInfo.cpp	/^void MessageQueueInfo::set_unTailOffset (unsigned /
shm_destory	SharedMemLegacy.cpp	/^int	ShmMemory::shm_destory()$/
shm_detach	SharedMemLegacy.cpp	/^int	ShmMemory::shm_detach(const void *shmaddr)$/
shm_lock	SharedMemLegacy.cpp	/^int ShmMemory::shm_lock()$/
shm_mode	SharedMemLegacy.cpp	/^int	ShmMemory::shm_mode(ShmInfo& si, int nCmd = IP/
shm_modeset	SharedMemLegacy.cpp	/^int	ShmMemory::shm_modeset(int nMode)$/
shm_release	SharedMemLegacy.cpp	/^int ShmMemory::shm_release()$/
shm_stat	SharedMemLegacy.cpp	/^int	ShmMemory::shm_stat()$/
shmat	SharedMemLegacy.cpp	/^void*  ShmBuf::shmat(const void* shmaddr=NULL, int/
shmctl	SharedMemLegacy.cpp	/^int ShmBuf::shmctl(int cmd, ShmInfo& ShmComp)$/
shmdt	SharedMemLegacy.cpp	/^int ShmBuf::shmdt(const void *shmaddr)$/
shmget	SharedMemLegacy.cpp	/^int ShmBuf::shmget(int nFlag) const$/
show_TrapInfoTable	t_trap_info.cpp	/^void t_trap_info::show_TrapInfoTable()$/
show_TrapTbl	t_trap_info.cpp	/^void t_trap_info::show_TrapTbl()$/
t_trap_info	t_trap_info.cpp	/^t_trap_info::t_trap_info()$/
unlock	CSemHandler.cpp	/^int CSemHandler::unlock()$/
writeLog	ConfigLog.cpp	/^void LogManagement::writeLog(char* strMsg, int nCn/
writeLogHexaForm	ConfigLog.cpp	/^void LogManagement::writeLogHexaForm (  const void/
write_BdsUdrData	BlockFile.cpp	/^int CFileData::write_BdsUdrData(unsigned int unSeq/
write_CommCfgFile	CommCfgFile.cpp	/^void CommCfgFile::write_CommCfgFile( void )$/
write_ErrorLog	MsgFormat.cpp	/^int	ProcErrInfo::write_ErrorLog()$/
write_FileConfigFile	BlockFile.cpp	/^void CFileConfigData::write_FileConfigFile()$/
write_Mqinfo	MqInfo_file.cpp	/^void MsgQfileInfo::write_Mqinfo(fstream* fQFile)$/
write_unFileSeq	BlockFile.cpp	/^void CFileConfigData::write_unFileSeq(unsigned int/
