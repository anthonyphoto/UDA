#include <BlockFile.hpp>
//#include <SendLogManage.hpp>

//	Log 积己阑 困茄 extern 按眉 积己
//	extern SendLogManage*  clsLogM;

//	BDS Send Data File Name	: use in BlockFile.cpp	(ex : BDS_UDR.11)

#ifdef	_SVC1
	const char*		FILE_NAME_COL_BDS_UDR		=	"/SVC1/BDS/BDS_UDR.";
#elif	_SVC2
	const char*		FILE_NAME_COL_BDS_UDR		=	"/SVC2/BDS/BDS_UDR.";
#endif

/////////////////////////////////
//	CLASS	CBlockConfigData's Method
/////////////////////////////////

CBlockConfigData::CBlockConfigData(const char* strFileName)
{
//	cout << "strFileName : " << strFileName << endl;
	read_BlockConfigFile(strFileName);
//	cout << "strFileName : " << strFileName << endl;

	strcpy(strCfgFileName, strFileName);

//	cout << "strCfgFileName : " << strCfgFileName << endl;

	nMaxRecCount = (nBlockSize - nBlockHeaderSize) / nRecSize;

/*	//	LOG 	///////////////////////////////////////////////////////////////
	*clsLogM 	<< "LOG : Error No #" 	<< clsLogM->ErrorCode(0) 	<< " "
				<< "Blk Conf File Name/ Max Rec Cnt/ Blk Sz/ Blk Hd Sz#/ Rec Sz ==> "
				<< strCfgFileName		<< " / "
				<< nMaxRecCount			<< " / "
				<< nBlockSize			<< " / "
				<< nBlockHeaderSize		<< " / "
				<< nRecSize				<< endl;
	//	LOG 	///////////////////////////////////////////////////////////////
*/
/*
	cout << "nMaxRecCount : " << nMaxRecCount << endl;
	cout << "nBlockSize : " << nBlockSize << endl;
	cout << "nBlockHeaderSize : " << nBlockHeaderSize << endl;
	cout << "nRecSize : " << nRecSize << endl;
*/
}

CBlockConfigData::~CBlockConfigData()
{
	write_BlockConfigFile();
}

void CBlockConfigData::read_BlockConfigFile()
{
	ifstream	ConfigFile(strCfgFileName, ios::binary);

	ConfigFile.read((char*)this, sizeof(CBlockConfigData));
	ConfigFile.close();
}

void CBlockConfigData::read_BlockConfigFile(const char* strFileName)
{
	ifstream	ConfigFile(strFileName, ios::binary);

	ConfigFile.read((char*)this, sizeof(CBlockConfigData));
	ConfigFile.close();
}

void CBlockConfigData::write_BlockConfigFile()
{
	ofstream	ConfigFile(strCfgFileName, ios::binary);

	ConfigFile.write(reinterpret_cast<const char *>(this), sizeof(CBlockConfigData));
	ConfigFile.close();
}

void CBlockConfigData::put_unBlockSeq(unsigned int unValue)
{
	unBlockSeq 	= unValue;

//	if ((unBlockSeq % 32) == 0)
		write_BlockConfigFile();

}

/////////////////////////////////
//	CLASS	CFileConfigData's Method
/////////////////////////////////

CFileConfigData::CFileConfigData(const char* strFileName)
{
	read_FileConfigFile(strFileName);

	strcpy(strCfgFileName, strFileName);

	nOneFileSize = (nMaxBlockCount * nOneBlockSize) + nFileHeaderSize;
}

CFileConfigData::~CFileConfigData()
{
	write_FileConfigFile();
}

void CFileConfigData::read_FileConfigFile()
{
	ifstream	ConfigFile(strCfgFileName, ios::binary);

	ConfigFile.read((char*)this, sizeof(CFileConfigData));
	ConfigFile.close();
}

void CFileConfigData::read_FileConfigFile(const char* strFileName)
{
	ifstream	ConfigFile(strFileName, ios::binary);

	ConfigFile.read((char*)this, sizeof(CFileConfigData));
	ConfigFile.close();
}

void CFileConfigData::write_FileConfigFile()
{
	ofstream	ConfigFile(strCfgFileName, ios::binary);

	ConfigFile.write(reinterpret_cast<const char*>(this), sizeof(CFileConfigData));
	ConfigFile.close();
}

void CFileConfigData::put_unFileSeq(unsigned int unValue)
{
	unFileSeq 	= unValue;

	write_FileConfigFile();
}

/////////////////////////////////
//	CLASS	CBlockData's Method
/////////////////////////////////

CBlockData::CBlockData(const char* strCfgFileName)
{
	clsPtrConfig = new CBlockConfigData(strCfgFileName);	//	get Block Info

	nBillDataLen =	clsPtrConfig->get_nBlockSize() - \
					clsPtrConfig->get_nBlockHeaderSize();

	strBillingData  = new char[nBillDataLen+1];
	strOneBlock		= new char[clsPtrConfig->get_nBlockSize()+1];

	memset (strBillingData,	0x20, nBillDataLen);
	strBillingData[nBillDataLen] = NULL;
	memset (strOneBlock,	NULL, clsPtrConfig->get_nBlockSize()+1);

	nTempRecCount	= 0;
	nEmptyRecCount	= 0;
	unTotalRecCount	= 0;

	clsPtrConfig->put_nMaxRecCount(nBillDataLen/clsPtrConfig->get_nRecSize());

	clsBlockHeader.put_nRecCount(0);
	clsBlockHeader.put_unBlockSeq(clsPtrConfig->get_unBlockSeq());
}

CBlockData::~CBlockData()
{
	delete	clsPtrConfig;
	delete	strBillingData;
	delete	strOneBlock;
}

int CBlockData::put_strBdsBlock()		//	Fill the Empty Record.
{
	char*	strEmptyBuf;
	int 	nTempSeq;

	strEmptyBuf = new char[clsPtrConfig->get_nRecSize()+1];
	memset(strEmptyBuf, 0x20, clsPtrConfig->get_nRecSize());
	strEmptyBuf[clsPtrConfig->get_nRecSize()] = NULL;

	nEmptyRecCount = nTempRecCount;

	if (nTempRecCount == 0)		//	Current Block has no Data.
	{
		//	Move Empty Block Header Data(Record Count) to a Block
		clsBlockHeader.put_nRecCount(0);
		clsBlockHeader.put_unBlockSeq(0);
	}
	else						//	Current Block has some Data.
	{
		//	Move Block Header Data(Record Count) to a Block
		clsBlockHeader.put_nRecCount(nTempRecCount);

		nTempSeq = clsPtrConfig->get_unBlockSeq();

		if ( nTempSeq == 0xFFFFFFFF)
			nTempSeq = 0;

		clsBlockHeader.put_unBlockSeq(nTempSeq);

		//	Move & Write Block Seq to Config Data

		nTempSeq = (clsBlockHeader.get_unBlockSeq()+1);

		if ( nTempSeq == 0xFFFFFFFF)
			nTempSeq = 0;

		clsPtrConfig->put_unBlockSeq(nTempSeq);
	}

	//	Move Empty Record to a Block
	while(1)
	{
		memcpy(	strBillingData+(nEmptyRecCount*clsPtrConfig->get_nRecSize()),
				strEmptyBuf,
				clsPtrConfig->get_nRecSize()	);

		nEmptyRecCount++;

		if (nEmptyRecCount == clsPtrConfig->get_nMaxRecCount())
			break;
	}

	//	Move Block Header to a UDR Block.
	memcpy(strOneBlock, (char*)&clsBlockHeader, sizeof(CbdsUdrBlockHeader));
	//	Move Bill Data to a Block
	memcpy(strOneBlock+sizeof(CbdsUdrBlockHeader), strBillingData, nBillDataLen	);

	memset (strBillingData,	0x20, nBillDataLen);
	strBillingData[nBillDataLen] = NULL;
	nTempRecCount = nEmptyRecCount = 0;

	delete strEmptyBuf;

	if ((clsBlockHeader.get_nRecCount() == 0) &&
		(unTotalRecCount			   	== 0))
		return FLAG_EMPTY_BLOCK_MADE;

	nTempRecCount = 0;

	return FLAG_BLOCK_MADE;
}

int CBlockData::put_strBdsBlock(char* strValue)
{
	memcpy(	strBillingData+(nTempRecCount*clsPtrConfig->get_nRecSize()),
			strValue,
			clsPtrConfig->get_nRecSize()	);

	nTempRecCount++;

	if(nTempRecCount >= clsPtrConfig->get_nMaxRecCount())
	{
		if (nTempRecCount == clsPtrConfig->get_nMaxRecCount())
		{
			//	Move Block Header Data(Record Count) to a Block
			clsBlockHeader.put_nRecCount(nTempRecCount);
			clsBlockHeader.put_unBlockSeq(clsPtrConfig->get_unBlockSeq());

			memcpy(strOneBlock, (char*)&clsBlockHeader, sizeof(CbdsUdrBlockHeader));
			//	Move Bill Data to a Block
			memcpy(strOneBlock+sizeof(CbdsUdrBlockHeader),\
					strBillingData,	nBillDataLen	);

			int 	nTempSeq = (clsBlockHeader.get_unBlockSeq()+1);

			if ( nTempSeq == 0xFFFFFFFF)
				nTempSeq = 0;

			//	Move & Write Block Seq to Config Data
			clsPtrConfig->put_unBlockSeq( nTempSeq );

			memset (strBillingData,	0x20, nBillDataLen);
			strBillingData[nBillDataLen] = NULL;
			nTempRecCount = 0;

			unTotalRecCount = (unTotalRecCount+3) % (0xFFFFFFFF);

			return(FLAG_BLOCK_MADE);
		}
		else
		{
			cout << "FAIL : int CBlockData::put_strBdsBlock(char* strValue)";
			cout << "\t" << "Record Count = " << nTempRecCount << endl;
			return -1;
		}
	}
	return(FLAG_BLOCK_NO_MADE);
}

/////////////////////////////////
//	CLASS	CFileData's Method
/////////////////////////////////

CFileData::CFileData(const char* strCfgFileName)
{
	clsPtrConfig = new CFileConfigData(strCfgFileName);	//	get Block Info

	nBillDataBlockLen = clsPtrConfig->get_nOneFileSize() - clsPtrConfig->get_nFileHeaderSize();

	strOneFile 		= new char[clsPtrConfig->get_nOneFileSize()+1];
	strBillingData	= new char[nBillDataBlockLen+1];
	strOneBlock		= new char[clsPtrConfig->get_nOneBlockSize()+1];

	memset(strOneFile, 		NULL, clsPtrConfig->get_nOneFileSize()+1);
	memset(strOneBlock,		NULL, clsPtrConfig->get_nOneBlockSize()+1);
	memset(strBillingData,	NULL, nBillDataBlockLen+1);

	memset(strFileName,		NULL, 128);

	nTempBlockCount = 0;

	if(clsPtrConfig->get_nOneBlockSize() == 0)
		cout << "ERROR : clsPtrConfig->get_nOneBlockSize() = " << clsPtrConfig->get_nOneBlockSize() << endl;

	clsPtrConfig->put_nMaxBlockCount(	nBillDataBlockLen / \
										clsPtrConfig->get_nOneBlockSize()	);

	cout << "nMaxBlockCount = " << clsPtrConfig->get_nMaxBlockCount() << endl;
	cout << "nBillDataBlockLen = " << nBillDataBlockLen << endl;
	cout << "clsPtrConfig->get_nOneBlockSize() = " << clsPtrConfig->get_nOneBlockSize() << endl;

	clsFileHeader.put_unBlockCount(0);

	cout << "nMaxBlockCount = " << clsPtrConfig->get_nMaxBlockCount() << endl;

	clsFileHeader.put_unFileSeq(clsPtrConfig->get_unFileSeq());

	cout << "CFileData's Constructor is OK !!" << endl;
}

CFileData::~CFileData()
{
	delete	clsPtrConfig;
	delete	strOneFile;
}

void CFileData::get_strBillingData(int nIndex, CUdrBlock* clsUdrOneBlock)
{
	memcpy((char*)clsUdrOneBlock, &strBillingData[nIndex*clsPtrConfig->get_nOneBlockSize()],
									clsPtrConfig->get_nOneBlockSize());

}

int CFileData::put_strBdsFile(int nBlockSeqNum, char* strValue)
{
	unsigned int	unBlockCount = 0;
	memcpy(	strBillingData+(nTempBlockCount*clsPtrConfig->get_nOneBlockSize()),
			strValue,
			clsPtrConfig->get_nOneBlockSize()	);

	if (nTempBlockCount == 0)
	{
		clsFileHeader.put_unStartBlockSeq(nBlockSeqNum);
		clsFileHeader.put_unEndBlockSeq(nBlockSeqNum);
	}

	else if (nBlockSeqNum != 0)
		clsFileHeader.put_unEndBlockSeq(nBlockSeqNum);


	if(nTempBlockCount >= (clsPtrConfig->get_nMaxBlockCount()-1))
	{
		cout << "TempBlockCount1 = " << nTempBlockCount << "\t, ";
		cout << "MaxBlockCount1 = " << clsPtrConfig->get_nMaxBlockCount() << endl;

		if (nTempBlockCount == (clsPtrConfig->get_nMaxBlockCount()-1))	//	0 ~ 31 (32 Block)
		{
			unBlockCount = 	(clsFileHeader.get_unEndBlockSeq() - \
							clsFileHeader.get_unStartBlockSeq()) + 1;

			//	Move File Header to a File
			clsFileHeader.put_unBlockCount(unBlockCount);
			clsFileHeader.put_unFileSeq(clsPtrConfig->get_unFileSeq());

			memcpy(strOneFile, (char*)&clsFileHeader, sizeof(CbdsUdrFileHeader));

			//	Move Bill Data Block to a File Buffer
			memcpy(&strOneFile[sizeof(CbdsUdrFileHeader)], strBillingData,	nBillDataBlockLen	);

			//	Write Bill Data
			if(write_BdsUdrData(clsPtrConfig->get_unFileSeq()) < 0)
				return -1;

			int 	nTempSeq = (clsFileHeader.get_unFileSeq()+1);

			if ( nTempSeq == 0xFFFFFFFF)
				nTempSeq = 0;

			//	Move & Write File Seq to Config Data
			clsPtrConfig->put_unFileSeq(nTempSeq);

			memset (strBillingData,	NULL, nBillDataBlockLen+1);
			nTempBlockCount = 0;

			return FLAG_FILE_MADE;
		}
		else
		{
			cout << "Block Count is overflow, Count is " << nTempBlockCount << endl;
			return -1;
		}
	}
	nTempBlockCount++;

	cout << "TempBlockCount2 = " << nTempBlockCount << "\t, ";
	cout << "MaxBlockCount2 = " << clsPtrConfig->get_nMaxBlockCount() << endl;

	return FLAG_FILE_NO_MADE;
}

void CFileData::make_BdsUdrFileName(unsigned int unSeq)
{
	char	strSeqBuf[24];

	memset(strFileName,		NULL, 128);
	memset(strSeqBuf,		NULL, 24);
	strcat (strFileName, FILE_NAME_COL_BDS_UDR);	//	"SVC1/BDS/BDS_UDR."
	sprintf(strSeqBuf, "%u", unSeq);
	strcat(strFileName, strSeqBuf);
}

int CFileData::write_BdsUdrData(unsigned int unSeq)
{
	make_BdsUdrFileName(unSeq);

	ofstream	BdsUdrFile(strFileName, ios::app | ios::noreplace | ios::binary);

	if (!BdsUdrFile)
	{
		cout << "Unable to open : [" <<strFileName << "]" << endl;
		return -1;
	}

	BdsUdrFile.write(reinterpret_cast<const char*>(strOneFile), clsPtrConfig->get_nOneFileSize());

	BdsUdrFile.close();

	return 0;
}

int CFileData::read_BdsUdrData(unsigned int unSeq)
{
	make_BdsUdrFileName(unSeq);

	ifstream	BdsUdrFile(strFileName, ios::binary);

	if (!BdsUdrFile)
	{
		cout << "Unable to open : [" << strFileName << "]" << endl;
		return -1;
	}

	memset(strOneFile, NULL, clsPtrConfig->get_nOneFileSize()+1);
	BdsUdrFile.read(reinterpret_cast<char*>(strOneFile), clsPtrConfig->get_nOneFileSize());
	BdsUdrFile.close();

	memcpy((char*)&clsFileHeader, strOneFile, sizeof(CbdsUdrFileHeader));
	memcpy(strBillingData		, strOneFile+sizeof(CbdsUdrFileHeader), nBillDataBlockLen );

	return 0;
}

unsigned int CFileData::get_LastWrittenUdrFileSeq()
{
	int 	nRet 		= 0,
			TempFileSeq = 0;

	for(int i = 0; ; i++)
	{
		nRet = read_BdsUdrData(get_unFileSeqInConf() - i);
		if (nRet == 0 && i == 0)
		{
			TempFileSeq = get_unFileSeq();

			for(int j = 1; j < 5; j++)
			{
				nRet = read_BdsUdrData(get_unFileSeqInConf() + j);
				if (nRet == 0)
				{
					TempFileSeq = get_unFileSeq();
					continue;
				}
				else
				{
					if (TempFileSeq != 0)
						return TempFileSeq;
				}
			}
		}
		else if (nRet == 0)
			return (get_unFileSeq());
	}
	return -1;
}

/////////////////////////////////
//	CLASS	CFileInfoData's Method
/////////////////////////////////

CFileInfoData::CFileInfoData(const char* strFileName)
{
	read_FileConfigFile(strFileName);

	strcpy(strInfoFileName, strFileName);
	memset (strDate, NULL, 12);
}

CFileInfoData::~CFileInfoData()
{
	;
}

void CFileInfoData::read_FileConfigFile()
{
	ifstream	FileInfo(strInfoFileName, ios::binary);

	FileInfo.read((char*)this, sizeof(CFileInfoData));
	FileInfo.close();
}

void CFileInfoData::read_FileConfigFile(const char* strFileName)
{
	ifstream	FileInfo(strFileName, ios::binary);

	FileInfo.read((char*)this, sizeof(CFileInfoData));
	FileInfo.close();
}

void CFileInfoData::write_FileConfigFile()
{
	ofstream	FileInfo(strInfoFileName, ios::binary);

	FileInfo.write(reinterpret_cast<const char*>(this), sizeof(CFileInfoData));
	FileInfo.close();
}

void CFileInfoData::put_FileInfoData(CbdsUdrFileHeader& clsUdrFileHeader, int nStatus)
{
	put_unFileSeq(clsUdrFileHeader.get_unFileSeq());
	put_nStartBlockSeq(clsUdrFileHeader.get_unStartBlockSeq());
	put_nEndBlockSeq(clsUdrFileHeader.get_unEndBlockSeq());
	put_nStatus(nStatus);

/*	/////////////////////////////////////////////////////////////////////////
	*clsLogM 	<< "LOG : Error No #" 	<< clsLogM->ErrorCode(0) 	<< " "
				<< "File Seq / Start Blk Seq / End Blk Seq / Status ==> "
				<< clsUdrFileHeader.get_unFileSeq()					<< " / "
				<< clsUdrFileHeader.get_unStartBlockSeq()			<< " / "
				<< clsUdrFileHeader.get_unEndBlockSeq()				<< " / "
				<< nStatus											<< endl;
	/////////////////////////////////////////////////////////////////////////
*/
/*
	cout <<	"\n=========================================" << endl;
	cout << "clsUdrFileHeader.get_unFileSeq()       = " << clsUdrFileHeader.get_unFileSeq() << endl;
	cout << "clsUdrFileHeader.get_unStartBlockSeq() = " << clsUdrFileHeader.get_unStartBlockSeq() << endl;
	cout << "clsUdrFileHeader.get_unEndBlockSeq()   = " << clsUdrFileHeader.get_unEndBlockSeq() << endl;
	cout << "nStatus                                = " << nStatus << endl;
	cout <<	"=========================================" << endl;
*/
	write_FileConfigFile();
}
