/*	Copyright (c) 1995 AT&T	*/
/*	  All Rights Reserved  	*/

/*	THIS IS UNPUBLISHED PROPRIETARY SOURCE CODE OF AT&T	*/
/*	The copyright notice above does not evidence any   	*/
/*	actual or intended publication of such source code.	*/


/*
 * NAME:	amatps+.x
 *
 * AUTHOR/DATE:	Scott Elliott		12/01/94
 *
 * DESCRIPTION:	RPC Language definition of the AMATPS+ RPC Service.
 *
 */

/*
 * Included in the header file generated by rpcgen
 */
#ifdef RPC_HDR
/*
 * The StarServer FT requires 2 additional include files
 */
%#ifdef us2_1		/* StarServer FT */
%#include <sys/types.h>
%#include <sys/timeval.h>
%#define CLSET_TIMEOUT	0
%#endif
%#ifdef hp
%#include <rpc/types.h>
%#endif
%#include <stdio.h>
%#include "amatps_api.h"
#endif

#ifdef RPC_CLNT
/*
 * The StarServer FT doesn't have a clnt_control procedure, which we need.
 */
%#ifdef us2_1
%int
%clnt_control(
%CLIENT		*clnt,
%int		function,
%char		*arg
%)
%{
%	extern	struct timeval	TIMEOUT ;
%
%	TIMEOUT.tv_sec = ((struct timeval *) arg)->tv_sec ;
%
%	return 0 ;
%}
%#endif
#endif
/*
 *	Interface structures: "*_input" structures pass arguments to the
 *	remote procedures. "*_return" structures are returned from the remote
 *	procedures. "string<>" types are compiled into "char *" data types;
 *	"opaque<>" types are compiled into a structure for passing variable
 *	length data, as follows:
 *
 *		struct {
 *			char *		name_val ;
 *			u_int		name_len ;
 *		} name ;
 */

struct ack_input {
	int	scid ;
	int	ack ;
} ;

struct connect_input {
	string	dcf<> ;
	opaque	acparms<> ;
} ;

struct	disconnect_input {
	int	scid ;
	int	type ;
} ;

struct	primary_return {
	int	scode ;
	opaque	fb<> ;
} ;

struct	secondary_input {
	int	scid ;
	int	tb ;
	int	fb ;
	long	sbsn ;
	long	ebsn ;
} ;

struct	secondary_return {
	int	scode ;
	opaque	fb<> ;
	opaque	tb<> ;
} ;

struct	maint_return {
	int	scode ;
	opaque	fb<> ;
} ;

struct	ssend_input {
	int	scid ;
	int	mtype ;
	opaque	smb<> ;
} ;

struct	srecv_input {
	int	scid ;
	int	mbsize ;
} ;

struct	srecv_return {
	int	scode ;
	int	mtype ;
	opaque	smb<> ;
} ;

struct	test_input { 
	int	scid ;
	int	count ;
} ;

struct	trace_input {
	int	trace_class ;
	int	trace_level ;
	string	file_prefix<> ;
	long	max_file_size ;
} ;

struct	link_return {
	int	scode ;
	opaque	x25_stat_buf<> ;
} ;

struct	dcf_return {
	int	scode ;
	string	fb<> ;
} ;

struct put_input {
	string	dcf<> ;
	string	fb<> ;
	char	cflag ;
	string	password<> ;
} ;

/*
 *	Remote procedure definitions: This defines the program number and 
 *	version of the RPC server, and the names and semantics of the remote
 *	procedures.
 */

program AMATPSPLUS {
	version AMATPSPLUSVER {
		int rpc_ack_primary( ack_input ) = 1;
		int rpc_connect_session( connect_input ) = 2;
		int rpc_disconnect_session( disconnect_input ) = 3;
		primary_return rpc_poll_primary( int ) = 4;
		secondary_return rpc_poll_secondary( secondary_input ) = 5;
		maint_return rpc_poll_maint( int ) = 6 ;
		int rpc_ssend( ssend_input ) = 7 ;
		srecv_return rpc_srecv( srecv_input ) = 8 ;
		int rpc_test_connection( test_input ) = 9 ;
		int rpc_set_trace( trace_input ) = 10 ;
		link_return rpc_get_link_stats( int ) = 11 ;
		int rpc_reset_link_stats( int ) = 12 ;
		int rpc_get_link_status( int ) = 13 ;
		dcf_return rpc_get_dcf( string ) = 14 ;
		int rpc_put_dcf( put_input ) = 15 ;
		int rpc_reset_server( string ) = 16 ;
	} = 1 ;		/* Version Number */
} = 0x2A3A7F50 ;	/* AMATPS+ RPC Program Number */
